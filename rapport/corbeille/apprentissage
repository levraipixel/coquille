Objectif

Pour apprendre à partir d'exemples, il faut exploiter les fichiers de preuves et situer chaque tactique dans son contexte. On voudrait obtenir les réponses existantes au problème « étant données ces hypothèses et ce but, quelle tactique dois-je appliquer ? ».




matériel et méthode

On dispose de fichiers .v (vernaculaires) qui correspondent à une liste de tactiques, on veut donc déduire du fichier le contexte dans lequel chaque tactique à été utilisée. On utilise alors coqtop, auquel on donne le fichier .v et on stocke les réponses interactives de coqtop dans un fichier (.out)
Il s'agit effectivement de la méthode d'apprentissage idéale, celle qui se passe du point de vue interactif.

Coqtop fournit les hypothèses et le but à prouver à chaque étape, sous forme non formatée car conçue pour l'utilisateur. Les outils pour dialoguer avec coq sont restreints et il n'est pas facile d'obtenir le contexte pour chaque problème de manière directe (problème qui se pose également avec l'IDE). Les formats d'échange XML déjà existant ne permettent pas d'avoir de résultat intermédiaires en cours de preuve.
On doit donc analyser la réponse interactive de coqtop, très spécifique. (Il n'est pas impossible que cette réponse soit formatée différemment au cours des prochaines versions de coq, mais coqtop a une interface relativement stable car peu utilisée pour son ergonomie). Les analyses lexicales et syntaxiques se font en partie à la main pour le schéma global difficile à appréhender avec des analyseurs classiques de types lex et yacc, car il est nécessaire de prendre en compte espaces, retours à la lignes et tabulations qui ont un sens différent selon la position dans le fichier.


Une autre partie, celle des formules classiques se fait à l'aide d'ocamllex et ocamlyacc, à qui on demande de parser une chaîne de caractères correspondant à une seule formule propositionnelle.

On n'utilise une grammaire restreinte à laquelle peuvent s'ajouter au fur et à mesure des jetons spécifiques. Ce n'est un problème que mineur, car l'apprentissage est spécifique à un domaine de problèmes et on peut à la limite adapter la grammaire dans le cas de problèmes utilisant des notations exotiques.
Il faut aussi analyser les fichier de preuves .v pour déterminer les tactiques. Cette analyse est spécifique et on n'a pas besoin d'analyser les fichiers vernaculaires d'une manière si compliquée que celle de coq, qui utilise un nombre important de fichiers de grammaires.

Il est important également de prendre en compte les nombreuses tactiques qui ne sont pas de simples chaînes de caractères monolithiques comme "apply (H H2) in H3" et il est pour cela nécessaire de repérer les identifiants dans une chaîne de caractère. Comme coq est très permissif sur les caractères autorisés dans les identifiants il est possibles que certains accents ne soient pas pris en compte durant l'apprentissage. (ce qui risque de générer un résultat moins précis à l'apprentissage.)

Pour les fichiers .v, on utilise un système qui combine également l'analyse ad hoc et les analyseurs ocamllex/yacc .






résultat

Les formats d'échange XML déjà existant ne permettent pas d'avoir de résultat intermédiaires en cours de preuve.

perspective
